# Generated by Django 4.1.7 on 2023-02-26 10:54

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=255)),
                ('guide_pdf_path', models.CharField(max_length=255)),
                ('inactive', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='GarbageCollectionScheduleTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='drtrottoir.building')),
            ],
        ),
        migrations.CreateModel(
            name='GarbageType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Issue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resolved', models.BooleanField(default=False)),
                ('message', models.TextField()),
                ('approval_user', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='issues_to_approve', to=settings.AUTH_USER_MODEL)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='drtrottoir.building')),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='issues_created', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LocationGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='ScheduleDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('version', models.IntegerField()),
                ('buildings', models.ManyToManyField(to='drtrottoir.building')),
                ('location_group', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='drtrottoir.locationgroup')),
            ],
        ),
        migrations.CreateModel(
            name='ScheduleWorkEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_timestamp', models.DateTimeField()),
                ('image_path', models.CharField(max_length=255)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='drtrottoir.building')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
                ('schedule_definition', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='drtrottoir.scheduledefinition')),
            ],
        ),
        migrations.CreateModel(
            name='ScheduleAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_date', models.DateField()),
                ('schedule_definition', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='drtrottoir.scheduledefinition')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='IssueImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_path', models.CharField(max_length=255)),
                ('issue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='drtrottoir.issue')),
            ],
        ),
        migrations.CreateModel(
            name='GarbageCollectionScheduleTemplateEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.SmallIntegerField()),
                ('garbage_collection_schedule_template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='drtrottoir.garbagecollectionscheduletemplate')),
                ('garbage_type', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='drtrottoir.garbagetype')),
            ],
        ),
        migrations.CreateModel(
            name='GarbageCollectionSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('for_day', models.DateField()),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='drtrottoir.building')),
                ('garbage_type', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='drtrottoir.garbagetype')),
            ],
        ),
        migrations.AddField(
            model_name='building',
            name='location_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='drtrottoir.locationgroup'),
        ),
        migrations.AddField(
            model_name='user',
            name='location_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='drtrottoir.locationgroup'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
